import logging
import json
from flask import Flask, jsonify, request, send_from_directory
from flask_cors import CORS
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, Bot, LabeledPrice
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackContext,
    Updater,
)

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
users_db = {}
products_db = []

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TOKEN = "7978464693:AAHfahvoHcalAmK17Op05OVY-2o8IMbXLxY"
bot = Bot(token="7978464693:AAHfahvoHcalAmK17Op05OVY-2o8IMbXLxY")
WEB_APP_URL = "https://telegram-application-gcf2.vercel.app/"
ADMIN_URL = "https://telegram-application-gcf2.vercel.app/admin.html"
provider_token = ""
@app.route('/')
def serve_index():
    return send_from_directory('static', 'index.html')


@app.route('/api/createInvoice', methods=['POST'])
def create_invoice():
    data = request.json
    user_id = data['userId']
    amount = data['amount']
    description = data['description']

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω–≤–æ–π—Å —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        invoice = bot.send_invoice(
            chat_id=user_id,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            title="–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤",  # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
            description=description,  # –û–ø–∏—Å–∞–Ω–∏–µ
            payload="some_payload",  # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
            provider_token=provider_token,  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            currency="XTR",  # –í–∞–ª—é—Ç–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Stars API, —ç—Ç–æ –±—É–¥–µ—Ç XTR)
            prices=[LabeledPrice("–ò—Ç–æ–≥–æ", amount * 100)]
            # –°—É–º–º–∞, —É–º–Ω–æ–∂–µ–Ω–Ω–∞—è –Ω–∞ 100 (–ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —É–∫–∞–∑–∞–Ω–∏—è —Å—É–º–º—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö)
        )

        return jsonify({"status": "success", "paymentUrl": invoice.url})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 400


@app.route('/css/<path:filename>')
def css(filename):
    return send_from_directory('static/css', filename)

@app.route('/js/<path:filename>')
def js(filename):
    return send_from_directory('static/js', filename)

@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@app.route('/admin.html')
def admin_panel():
    return send_from_directory('static', 'admin.html')

@app.route('/webhook', methods=['POST'])
def handle_payment_confirmation():
    data = request.json
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞)
    if data['status'] == 'paid':
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ç.–¥.
        return jsonify({"status": "success"})
    return jsonify({"status": "error", "message": "Payment failed"}), 400

@app.route('/api/products', methods=['POST'])
def add_product():
    try:
        new_product = {
            "id": len(products_db) + 1,
            "name": request.json['name'],
            "price": int(request.json['price']),
            "description": request.json.get('description', ''),
            "category": request.json.get('category', 'popular'),
            "image": request.json.get('image', '')
        }
        products_db.append(new_product)
        return jsonify({"status": "success", "product": new_product})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 400

@app.route('/api/products/<int:product_id>', methods=['DELETE'])
def delete_product(product_id):
    global products_db
    products_db = [p for p in products_db if p['id'] != product_id]
    return jsonify({"status": "success"})

@app.route('/api/products')
def get_products():
    return jsonify(products_db)


@app.route('/api/payment', methods=['POST'])
def handle_payment():
    data = request.json
    user_id = data['user_id']
    amount = data['amount']

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in users_db:
        users_db[user_id]['balance'] -= amount
        return jsonify({"status": "success"})

    return jsonify({"status": "error", "message": "User not found"}), 404

@app.route('/api/user')
def get_user():
    user_id = request.args.get('user_id')
    return jsonify(users_db.get(user_id, {"balance": 0}))


@app.route('/api/checkout', methods=['POST'])
def checkout():
    data = request.json
    user_id = data['user_id']

    if user_id not in users_db:
        return jsonify({"status": "error", "message": "User not found"}), 404

    total = sum(item['price'] * item['quantity'] for item in data['cart'])

    if users_db[user_id]['balance'] >= total:
        users_db[user_id]['balance'] -= total
        return jsonify({"status": "success", "new_balance": users_db[user_id]['balance']})
    else:
        return jsonify({"status": "error", "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}), 400


# Telegram Bot Handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users_db[str(user.id)] = {"balance": 1000}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∞–¥–º–∏–Ω–∫–∏
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                text="üéÅ –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url=WEB_APP_URL)  # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
            )
        ],
        [
            InlineKeyboardButton(
                text="üõ† –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É",
                web_app=WebAppInfo(url=ADMIN_URL)  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∫—É
            )
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {users_db[str(user.id)]['balance']} ‚≠ê",
        reply_markup=keyboard
    )


def run_bot():
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.run_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞


if __name__ == '__main__':
    from threading import Thread

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    run_bot()